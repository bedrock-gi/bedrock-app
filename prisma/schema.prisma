generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  name         String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userProjects UserProject[]
}

model UserProject {
  role       Role
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  project    Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String
  agsUploads AgsUpload[]

  @@id([userId, projectId])
}

model Project {
  id   String @id @default(uuid())
  name String

  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  locations    Location[]
  userProjects UserProject[]

  columnDefinitions ColumnDefinition[]
}

enum Role {
  OWNER
  ADMIN
  VIEWER
  EDITOR
}

model Location {
  id            String   @id @default(uuid())
  name          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String
  latitude      Float?
  longitude     Float?
  customColumns Json?
}

model Sample {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ColumnDefinition {
  id        String   @id @default(uuid())
  columnId  String
  tableId   String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  label     String
  dataType  DataType
}

enum DataType {
  STRING
  NUMBER
}

enum AgsUploadStatus {
  VALIDATED
  CANCELLED
  FAILED
  COMPLETED
  STARTED
}

model AgsUpload {
  id          String          @id @default(uuid())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  userProject UserProject     @relation(fields: [userId, projectId], references: [userId, projectId])
  userId      String
  projectId   String
  fileUrl     String
  status      AgsUploadStatus
}

// model LabTest {
//   id            String   @id @default(uuid())
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt
//   customColumns Json
// }
